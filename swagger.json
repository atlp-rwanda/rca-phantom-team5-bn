{
  "swagger": "2.0",
  "info": {
    "description": "Elevate the public transport experience",
    "version": "1.0.0",
    "title": "PHANTOM ASSIGNMENT",
    "termsOfService": "https://github.com/atlp-rwanda/rca-phantom-team5-bn#readme",
    "contact": {
      "email": ""
    }
  },
  
  "host-loc": "localhost:3000",
  "host-live": "localhost:3000",
  "host": "localhost:3000",
 

  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT authentication using the Bearer scheme. Enter the JWT token in the format 'Bearer {token}'."
    }
  },

  "basePath": "/api",

  "tags": [
    {
      "name": "Initial Route",
      "description": "Initial/Fake Endpoint | GET Route"
    },
    {
      "name": "Auth Routes",
      "description": "Authentication endpoints | POST Route"
    },
    {
      "name": "User Routes",
      "description": "User endpoints | Put Route"
    },
    {
      "name": "Admin Routes",
      "description": "Admin endpoints | GET Route"
    },
    {
      "name": "Routes Routes",
      "description": "Routes endpoints | GET Route"
    },
    {
      "name": "Bus Routes",
      "description": "Buses endpoints | GET Route"
    }
  ],

  "schemes": [
    "http",
    "https"
  ],

  "consumes": [
    "application/json",
    "none"
  ],

  "produces": [
    "application/json",
    "none"
  ],

  "paths": {
    "/": {
      "get": {
        "tags": [
          "Initial Route"
        ],
        "summary": "Handle Intial / Wrong GET Route)",
        "description": "By the use of initial/wrong GET endpoint, you will be able to see welcome message (Welcome To Phantom Server)",
        "responses": {
          "200": {
            "description": "Success. (Welcome To Phantom Server)"
          }
        }
      }
    },

    "/auth/signin": {
      "post": {
        "tags": [
          "Auth Routes"
        ],
        "summary": " (Signin User With POST Route)",
        "description": "By the use of this POST endpoint, you will be able to signin a user account",
        "responses": {
          "200": {
            "description": "OK."
          },
          "400": {
            "description": "BAD_REQUEST."
          },
          "404": {
            "description": "NOT_FOUND."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "type": "object",
            "required": true,
            "description": "Body Request",
            "schema": {
              "$ref": "#/definitions/Signin"
            }
          }
        ]
      }
    },

    "/auth/register-user": {
      "post": {
        "tags": [
          "Auth Routes"
        ],
        "summary": " (Register User With POST Route)",
        "description": "By the use of this POST endpoint, you will be able to register a user account",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED."
          },
          "400": {
            "description": "BAD_REQUEST."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "type": "object",
            "required": true,
            "description": "Body Request",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ]
      }
    },
    
    "/auth/reset-password-email": {
      "post": {
        "tags": [
          "Auth Routes"
        ],
        "summary": " (Send Reset Password Link User With POST Route)",
        "description": "By the use of this POST endpoint, you will be able to Send Reset Password Link User Email",
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "BAD_REQUEST."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "type": "object",
            "required": true,
            "description": "Body Request",
            "schema": {
              "$ref": "#/definitions/ResetPassword"
            }
          }
        ]
      }
    },

    
    "/auth/reset-password/{token}": {
      "put": {
        "tags": [
          "Auth Routes"
        ],
        "summary": " (Reset User password  With PUT Route)",
        "description": "By the use of this POST endpoint, you will be able to reset password",
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "BAD_REQUEST."
          }
        },
    
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "type": "string",
            "required": true,
            "description": "Token in the Link sent"
          }
          ,{
            "in": "body",
            "name": "body",
            "type": "object",
            "required": true,
            "description": "Body Request",
            "schema": {
              "$ref": "#/definitions/NewPassword"
            }
          }
        ]
      }
    },



    "/auth/logout": {
      "delete": {
        "summary": "Log out a user",
        "description": "Logs out the currently authenticated user.",
        "tags": [
          "Auth Routes"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description":"parsing a session/token in the hearder authorization with Bearer Session. Ex: ( Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6Me )"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "400": {
            "description": "BAD_REQUEST"
          }
        }
      }
    },  
    
    "/auth/delete-user/{userId}":{
      "delete":{
        "tags": [
          "Auth Routes"
        ],
        "summary": " (Delete a Driver or operator  DELETE Route)",
        "description": "By the use of this DELETE endpoint, you will be able to delete a driver or operator",
        "responses":{
          "200": {
            "description": "OK."
          },
          "404": {
            "description": "NOT_FOUND."
          },
          "400": {
            "description":"BAD_REQUEST."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "type": "integer",
            "required": true,
            "description": "user Id"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },
  
    "/users/get-profile": {
      "get": {
        "tags": [
          "User Routes"
        ],
        "summary": " (Get user profile With GET Route)",
        "description": "By the use of this GET endpoint, you will be able to get a user profile",
        "responses": {
          "200": {
            "description": "OK."
          },
          "401": {
            "description": "UNAUTHORIZED."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
   
    "/users/update-profile": {
      "put": {
        "tags": [
          "User Routes"
        ],
        "summary": " (Update User With PUT Route)",
        "description": "By the use of this PUT endpoint, you will be able to update a user account",
        "security":[
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "400": {
            "description": "BAD_REQUEST."
          },
          "401": {
            "description": "UNAUTHORIZED."
          },
          "404": {
            "description": "NOT_FOUND."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "type": "object",
            "required": true,
            "description": "Body Request",
            "schema": {
              "$ref": "#/definitions/UpdateProfile"
            }
          }
        ]
      }
    },

    "/users/get-drivers":{
    "get":{
       "tags":[
          "User Routes"
        ],
      "summary": "Get all drivers by operator with GET route",
      "description": "Returns a list of all users with role driver",
      "responses":{
          "200": {
            "description": "OK."
          },
          "400": {
            "description":"BAD_REQUEST."
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
  }
  },

    "/admins/get-user/{id}": {
      "get": {
        "tags": [
          "Admin Routes"
        ],
        "summary": " (Get user profile using his/her id With GET Route)",
        "description": "By the use of this GET endpoint, you will be able to get a user profile as long as you have his/her id",
        "responses": {
          "200": {
            "description": "OK."
          },
          "401": {
            "description": "UNAUTHORIZED."
          },
          "404": {
            "description": "NOT_FOUND."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "user Id"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },

    "/routes/create-routes":{
      "post":{
        "tags": [
          "Routes Routes"
        ],
        "summary": " (Post a  route with POST Route)",
        "description": "By the use of this POST endpoint, you will be able to create a route",
        "responses":{
          "200": {
            "description": "OK."
          },
          "400": {
            "description":"BAD_REQUEST."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "type": "object",
            "required": true,
            "description": "Body Request",
            "schema": {
              "$ref": "#/definitions/Routes"
            }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },

    "/routes/get-routes":{
      "get": {
        "tags":[
          "Routes Routes"
        ],
        "summary": "(Get all the routes with GET Route)",
        "description": "By the use of this GET endpoint, you will be able to get all routes",
        "responses": {
          "200": {
            "description": "OK."
          },
          "500": {
            "description":"BAD_REQUEST."
          }
        }
      }
    },

    "/routes/get-route/{id}":{
      "get":{
        "tags": [
          "Routes Routes"
        ],
        "summary": " (Get a single route with GET Route)",
        "description": "By the use of this GET endpoint, you will be able to retrieve a single route",
        "responses":{
          "200": {
            "description": "OK."
          },
          "404": {
            "description": "NOT_FOUND."
          },
          "500": {
            "description":"BAD_REQUEST."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "route Id"
          }
        ]
      }
    },

    "/routes/update-route/{id}":{
      "put":{
        "tags": [
          "Routes Routes"
        ],
        "summary": " (Update a route with PUT Route)",
        "description": "By the use of this PUT endpoint, you will be able to update a route",
        "responses":{
          "200": {
            "description": "OK."
          },
          "404": {
            "description": "NOT_FOUND."
          },
          "400": {
            "description":"BAD_REQUEST."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "route Id"
          },
          {
            "in": "body",
            "name": "body",
            "type": "object",
            "required": true,
            "description": "Body Request",
            "schema": {
              "$ref": "#/definitions/Routes"
            }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },

    "/routes/delete-route/{id}":{
      "delete":{
        "tags": [
          "Routes Routes"
        ],
        "summary": " (Delete a route with DELETE Route)",
        "description": "By the use of this DELETE endpoint, you will be able to delete a route",
        "responses":{
          "200": {
            "description": "OK."
          },
          "404": {
            "description": "NOT_FOUND."
          },
          "400": {
            "description":"BAD_REQUEST."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "route Id"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },

    "/buses/create-bus": {
      "post": {
        "tags": [
          "Bus Routes"
        ],
        "summary": "(Create a new bus with POST route}",
        "description": "By the use of this POST endpoint, you will be able to a new bus",
        "responses": {
          "201": {
            "description": "CREATED."
          },
          "400": {
            "description": "BAD_REQUEST."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "type": "object",
            "required": true,
            "description": "Body Request",
            "schema": { "$ref": "#/definitions/Buses" }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },

    "/buses/get-buses": {
      "get": {
        "tags": [
          "Bus Routes"
        ],
        "summary": " (Get all buses With GET Route)",
        "description": "By the use of this GET endpoint, you will be able to get all buses",
        "responses": {

          "200": {
            "description": "OK."
          },
          "400": {
         "description": "BAD_REQUEST."
          },
          "404": {
            "description": "NOT_FOUND."
          }
        },
       "schema": { "$ref": "#/definitions/Buses" }
      }
    },
    
    "/buses/get-bus/{id}": {
      "get": {
        "tags": [
          "Bus Routes"
        ],
        "summary": " (Get Bus With GET Route)",
        "description": "By the use of this GET endpoint, you will be able to get a bus",
        "responses": {

          "200": {
            "description": "OK."
          },
          "400": {
         "description": "BAD_REQUEST."
          },
          "404": {
            "description": "NOT_FOUND."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Bus Id",
            "schema": { "$ref": "#/definitions/Buses" }
          }
        ]
      }
    },

    "/buses/update-bus/{id}": {
      "put": {
        "tags": [
          "Bus Routes"
        ],
        "summary": " (Update Bus With PUT Route)",
        "description": "By the use of this PUT endpoint, you will be able to update a bus",
        "responses": {
          "200": {
            "description": "OK."
          },
          "400": {
            "description": "BAD_REQUEST."
          },
          "404": {
            "description": "NOT_FOUND."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Bus Id"
          },{
            "in": "body",
            "name": "body",
            "type": "object",
            "required": true,
            "description": "Body Request",
            "schema": { "$ref": "#/definitions/Buses" }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },

    "/buses/delete-bus/{id}": {
      "delete": {
        "tags": [
          "Bus Routes"
        ],
        "summary": " (Delete Bus With DELETE Route)",
        "description": "By the use of this DELETE endpoint, you will be able to delete a bus",
        "responses": {
          "200": {
            "description": "OK."
          },
          "400": {
            "description": "BAD_REQUEST."
          },
          "404": {
            "description": "NOT_FOUND."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Bus Id",
            "schema": { "$ref": "#/definitions/Buses" }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ]
      }
    },

    "/buses/assign-bus":{
      "post":{
        "tags": [
          "Bus Routes"
        ],
        "summary": " (Assign bus to driver by operator with POST Route)",
        "description": "By the use of this POST endpoint, you will be able to assign buses to driver",
        "responses":{
          "200": {
            "description": "OK."
          },
          "400": {
            "description":"BAD_REQUEST."
          },
            "500": {
            "description":"INTERNAL SERVER ERROR"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "type": "object",
            "required": true,
            "description": "Body Request",
            "schema": {
              "$ref": "#/definitions/BusesDrivers"
            }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ]
      }
    }
  },

  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "Bearer",
        "bearerFormat": "JWT",
        "name": "Authorization",
        "in": "header"
      }
    }
  },

  "definitions": {
    "Users": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "example": "[operator, driver]"
        },
        "fname": {
          "type": "string",
          "example": "John"
        },
        "lname": {
          "type": "string",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "required": true,
          "example": "your-email@gmail.com"
        },
        "driver_licence": {
          "type": "array",
          "required": true,
          "example": "['A','B','C','D','E','F']"
        },
        "nid": {
          "type": "string",
          "required": true,
          "example": "1920786767665547"
        }
      }
    },



    
    "ResetPassword": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "required": true,
          "example": "your-email@gmail.com"
        }
      }
    },
     "NewPassword": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "required": true,
          "example": "your-new password"
        },
        "confirm_password": {
          "type": "string",
          "required": true,
          "example": "your-new password"
        }
      }
    },

    "Signin": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "required": true,
          "example": "your-email@gmail.com"
        },
      
        "password": {
          "type": "string",
          "required": true,
          "example": "Test@123"
        },
        "device_id": {
          "type": "string",
          "required": true,
          "example": "SMG-1234"
        }
      }
    },

    "UpdateProfile": {
      "type": "object",
      "properties": {
        "fname": {
          "type": "string",
          "example": "John"
        },
        "lname": {
          "type": "string",
          "example": "Doe"
        },
        "driver_licence": {
          "type": "string",
          "required": true,
          "example": ""
        }
      }
    },

    "Routes":{
      "type":"object",
      "properties": {
        "route_name":{
          "type":"string",
          "example": "Kimironko-Town"
        },
        "start":{
          "type":"string",
          "example": "Kimironko"
        },
        "end":{
          "type":"string",
          "example": "Town"
        },
        "stops":{
          "type":"array",
          "example": "[\"Rando\",\"KBC\",\"KH\"]"
        }
      }
    },

    "Buses": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Toyota Corolla"
        },
        "available_sits": {
          "type": "number",
          "example": 5
        },
        "model": {
          "type": "string",
          "example": "XLi"
        },
        "plate_number": {
          "type": "string",
          "example": "ABC-123"
        },
        "driver_id": {
          "type": "number",
          "example": null
        }
      }
    },
      "BusesDrivers": {
      "type": "object",
      "properties": {
        "bus_id": {
          "type": "number",
          "example": 1
        },
        "driver_id": {
          "type": "number",
          "example": 1
        }
      }
    },
    "BusesRoutes": {
      "type": "object",
      "bus_id": {
        "name": {
          "type": "number",
          "example": 2
        },
        "route_id": {
          "type": "number",
          "example": 2
        }
      }
    }
  }
  }
